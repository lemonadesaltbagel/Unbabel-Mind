'use client';
import{useParams,useRouter}from'next/navigation';
import{useEffect,useState}from'react';
import{Home}from'lucide-react';
import{useAuth}from'@/contexts/AuthContext';
import{ldp,getWritingRating}from'@/utils/writing';
import{useTestPageTitle}from'@/utils/usePageTitle';
import{WritingRatingResponse}from'@/types/writing';
export default function WritingReviewPage(){
useTestPageTitle();
const r=useRouter();
const p=useParams();
const {user,loading}=useAuth();
const {id,type}=p as {id:string;type:string};
const [pt,setPt]=useState('');
const [pc,setPc]=useState('');
const [essay,setEssay]=useState('');
const [rating,setRating]=useState<WritingRatingResponse|null>(null);
const [isLoading,setIsLoading]=useState(false);
useEffect(()=>{
if(!loading&&!user)r.push('/login');
},[user,loading,r]);
useEffect(()=>{
(async()=>{
const {title,content}=await ldp(id,type);
setPt(title);
setPc(content);
})();
},[id,type]);
useEffect(()=>{
const saved=localStorage.getItem(`writing-answers-${id}-${type}`);
if(saved)setEssay(saved);
},[id,type]);
useEffect(()=>{
if(essay&&pc&&!rating&&!isLoading){
setIsLoading(true);
getWritingRating(essay,`${pt}\n\n${pc}`).then(result=>{
setRating(result);
setIsLoading(false);
}).catch(()=>{
setIsLoading(false);
});
}
},[essay,pc,pt,rating,isLoading]);
const hn=(d:'back'|'next')=>{
const nt=d==='back'?Number(type)-1:Number(type)+1;
if(nt>=1&&nt<=4)r.push(`/writing/${id}/${nt}/review`);
};
if(loading)return(<div className="min-h-screen bg-black flex items-center justify-center"><div className="text-white text-xl">Loading...</div></div>);
if(!user)return null;
if(pt===''||pc==='Failed to load writing prompt.')return(<div className="min-h-screen bg-black flex items-center justify-center"><div className="text-white text-xl">Failed to load writing prompt.</div></div>);
return(<div className="min-h-screen bg-black text-black p-4 sm:p-6 flex flex-col items-center">
<div className="w-full max-w-6xl flex items-center mb-4">
<div className="w-6">
<button onClick={()=>r.push('/dashboard')} className="text-white hover:text-blue-500 transition">
<Home className="w-6 h-6"/>
</button>
</div>
<div className="flex-1 flex justify-center">
<h1 className="text-white text-2xl font-bold">Review: Writing Task {type}</h1>
</div>
<div className="w-6"></div>
</div>
<div className="flex w-full max-w-6xl space-x-4">
<div className="w-1/3 bg-white p-6 rounded-xl shadow overflow-y-auto h-[80vh]">
<h2 className="text-xl font-bold mb-4">Writing Prompt</h2>
<div className="mb-4">
<h3 className="font-semibold text-lg">{pt}</h3>
</div>
<div className="whitespace-pre-wrap text-sm text-gray-700">{pc}</div>
</div>
<div className="w-1/3 bg-white p-6 rounded-xl shadow overflow-y-auto h-[80vh]">
<h2 className="text-xl font-bold mb-4">Your Essay</h2>
<div className="whitespace-pre-wrap text-sm text-gray-700 mb-4">{essay}</div>
<div className="text-xs text-gray-500">
Word Count: {essay.split(' ').filter(w=>w.length>0).length}
</div>
</div>
<div className="w-1/3 bg-white p-6 rounded-xl shadow overflow-y-auto h-[80vh]">
<h2 className="text-xl font-bold mb-4">AI Feedback</h2>
{isLoading?(<div className="flex items-center justify-center h-32 text-gray-500">Analyzing your essay...</div>):rating?(<div className="space-y-4">
<div className="bg-gray-50 p-4 rounded-lg">
<h3 className="font-semibold mb-2">IELTS Writing Scores</h3>
<div className="space-y-2 text-sm">
<div className="flex justify-between">
<span>Task Achievement:</span>
<span className="font-semibold">{rating.rating.taskAchievement}</span>
</div>
<div className="flex justify-between">
<span>Coherence & Cohesion:</span>
<span className="font-semibold">{rating.rating.coherenceCohesion}</span>
</div>
<div className="flex justify-between">
<span>Lexical Resource:</span>
<span className="font-semibold">{rating.rating.lexicalResource}</span>
</div>
<div className="flex justify-between">
<span>Grammatical Range & Accuracy:</span>
<span className="font-semibold">{rating.rating.grammaticalRangeAccuracy}</span>
</div>
<div className="border-t pt-2 mt-2">
<div className="flex justify-between font-bold">
<span>Final Score:</span>
<span className="text-blue-600">{rating.finalScore}</span>
</div>
<div className="text-xs text-gray-500">
Average: {rating.averageScore.toFixed(1)}
</div>
</div>
</div>
</div>
<div className="bg-blue-50 p-4 rounded-lg">
<h3 className="font-semibold mb-2">Detailed Feedback</h3>
<div className="whitespace-pre-wrap text-sm text-gray-700">{rating.feedback}</div>
</div>
<div className="text-xs text-gray-400 italic">
Generated by Unbabel AI
</div>
</div>):(<div className="text-center text-gray-500 mt-4">No feedback available</div>)}
</div>
</div>
<div className="w-full max-w-6xl flex justify-center mt-6 space-x-4">
<button onClick={()=>hn('back')} disabled={type==='1'} className={`px-6 py-2 rounded-lg transition-colors ${type==='1'?'bg-gray-300 cursor-not-allowed text-gray-500':'bg-blue-500 hover:bg-blue-600 text-white'}`}>
Back
</button>
<button onClick={()=>hn('next')} disabled={type==='4'} className={`px-6 py-2 rounded-lg transition-colors ${type==='4'?'bg-gray-300 cursor-not-allowed text-gray-500':'bg-blue-500 hover:bg-blue-600 text-white'}`}>
Next
</button>
</div>
</div>);
}