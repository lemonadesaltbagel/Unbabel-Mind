'use client';
import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { authAPI } from '@/utils/api';
import type { User } from '@/types';
interface AuthContextType{user:User|null;loading:boolean;login:(email:string,password:string)=>Promise<void>;register:(data:{firstName:string;lastName:string;email:string;password:string})=>Promise<void>;logout:()=>void;updateUser:(data:{firstName:string;lastName:string;email:string})=>Promise<void>;}
const AuthContext=createContext<AuthContextType|undefined>(undefined);
export const AuthProvider=({children}:{children:ReactNode})=>{const [user,setUser]=useState<User|null>(null);const [loading,setLoading]=useState(true);useEffect(()=>{const i=async()=>{try{const t=localStorage.getItem('token');if(t){const u=await authAPI.getProfile();setUser(u);}}catch{localStorage.removeItem('token');setUser(null);}finally{setLoading(false);}};i();},[]);const login=async(e:string,p:string)=>{const r=await authAPI.login(e,p);localStorage.setItem('token',r.token);setUser(r.user);};const register=async(d:{firstName:string;lastName:string;email:string;password:string})=>{const r=await authAPI.register(d);localStorage.setItem('token',r.token);setUser(r.user);};const updateUser=async(d:{firstName:string;lastName:string;email:string})=>{const u=await authAPI.updateProfile(d);setUser(u);};const logout=()=>{localStorage.removeItem('token');setUser(null);};return(<AuthContext.Provider value={{user,loading,login,register,logout,updateUser}}>{children}</AuthContext.Provider>);};
export const useAuth=()=>{const c=useContext(AuthContext);if(!c)throw new Error('useAuth must be used within AuthProvider');return c;}; 