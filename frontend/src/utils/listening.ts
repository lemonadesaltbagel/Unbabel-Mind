import type { ListeningSubmission } from '@/types/listening';
import type { Question } from '@/types/reading';
export const lk=(id:string,type:string)=>`listening-answers-${id}-${type}`;
export const hlk=(id:string,type:string)=>`listening-highlights-${id}-${type}`;
export const ld=(id:string,type:string):Record<number,string[]>=>{const s=localStorage.getItem(lk(id,type));return s?JSON.parse(s):{};};
export const sv=(id:string,type:string,a:Record<number,string[]>):void=>{localStorage.setItem(lk(id,type),JSON.stringify(a));};
export const ldh=(id:string,type:string):{text:string;start:number;end:number}[]=>{const s=localStorage.getItem(hlk(id,type));return s?JSON.parse(s):[];};
export const svh=(id:string,type:string,h:{text:string;start:number;end:number}[]):void=>{localStorage.setItem(hlk(id,type),JSON.stringify(h));};
export const ldp=async(id:string,type:string):Promise<{title:string;content:string}>=>{try{const res=await fetch(`/static/listening/${id}_${type}.txt`);const text=await res.text();const[tl,...rest]=text.split('\n');return{title:tl.trim(),content:rest.join('\n').trim()};}catch{return{title:'',content:'Failed to load audio transcript.'};}};
export const ldq=async(id:string,type:string):Promise<Question[]>=>{try{const res=await fetch(`/static/listening/${id}_${type}_q.json`);return await res.json();}catch{return[{type:'intro',text:'Failed to load questions.'}];}};
export const lde=async(id:string,type:string):Promise<{number:number;text:string}[]>=>{try{const res=await fetch(`/static/listening/${id}_${type}_e.json`);return await res.json();}catch{return[];}};
export const sub=async(pl:ListeningSubmission):Promise<{ok:boolean;message:string;score?:number;correctAnswers?:number;totalQuestions?:number}>=>{try{const res=await fetch('/api/submitAnswer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(pl)});const result=await res.json();return{ok:res.ok,message:result.message||'Submission failed.',score:result.score,correctAnswers:result.correctAnswers,totalQuestions:result.totalQuestions};}catch{return{ok:false,message:'Network error.'};}};
export const getListeningAnswers=async(userId:string,passageId:string,questionType:string):Promise<Record<number,{questionNumber:number;userAnswer:string[]}>>=>{try{const u=process.env.NEXT_PUBLIC_API_URL;const res=await fetch(`${u}/answers/${userId}/${passageId}/${questionType}`);if(!res.ok)return{};const result=await res.json();if(!result.success)return{};const answers:Record<number,{questionNumber:number;userAnswer:string[]}>={};if(result.data&&Array.isArray(result.data)){result.data.forEach((a:{questionNumber:number;userAnswer:string[]})=>{answers[a.questionNumber]=a;});}return answers;}catch{return{};}};
export const getListeningReviewAnswers=async(userId:string,passageId:string,questionType:string):Promise<{questionNumber:number;userAnswer:string[]}[]>=>{try{const u=process.env.NEXT_PUBLIC_API_URL;const r=await fetch(`${u}/answers/review/${userId}/${passageId}/${questionType}`);if(!r.ok)return[];const t=await r.json();if(!t.success)return[];return t.data;}catch{return[];}};
export const getResultsWithCorrectAnswers=async(uid:number,pid:number,qt:number):Promise<{questionId:number;userAnswer:string[];correctAnswer:string;isCorrect:boolean}[]>=>{try{const u=process.env.NEXT_PUBLIC_API_URL;const r=await fetch(`${u}/answers/review/${uid}/${pid}/${qt}`);if(!r.ok)return[];const t=await r.json();if(!t.success)return[];return t.data;}catch{return[];}};
export const generateAudioDuration=(id:string,type:string):number=>{const hash=id.split('').reduce((a,b)=>{a=((a<<5)-a)+b.charCodeAt(0);return a&a;},0)+type.split('').reduce((a,b)=>{a=((a<<5)-a)+b.charCodeAt(0);return a&a;},0);const min=600;const max=840;return min+(Math.abs(hash)%(max-min+1));}; 