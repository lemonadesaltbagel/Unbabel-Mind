import type { User, AuthResponse, Passage, AnswerSubmission, SubmissionResult, Progress } from '@/types';
const b=process.env.NEXT_PUBLIC_API_URL||'http://localhost:3001';
const h=()=>{const t=typeof window!=='undefined'?localStorage.getItem('token'):null;return t?{Authorization:`Bearer ${t}`}:{};};
export const apiClient={async request<T>(e:string,o:RequestInit={}):Promise<T>{const u=`${b}${e}`;const a=h();const c:RequestInit={headers:{'Content-Type':'application/json',...(a as Record<string,string>),...(o.headers as Record<string,string>)},...o};const r=await fetch(u,c);if(!r.ok){const e=await r.json().catch(()=>({message:'Network error'}));throw new Error(e.message||`HTTP ${r.status}`);}return r.json();},get:<T>(e:string)=>apiClient.request<T>(e),post:<T>(e:string,d:unknown)=>apiClient.request<T>(e,{method:'POST',body:JSON.stringify(d)}),put:<T>(e:string,d:unknown)=>apiClient.request<T>(e,{method:'PUT',body:JSON.stringify(d)}),delete:<T>(e:string)=>apiClient.request<T>(e,{method:'DELETE'})};
export const authAPI={login:(e:string,p:string)=>apiClient.post<AuthResponse>('/auth/login',{email:e,password:p}),register:(d:{firstName:string;lastName:string;email:string;password:string})=>apiClient.post<AuthResponse>('/auth/register',d),logout:()=>{if(typeof window!=='undefined'){localStorage.removeItem('token');}},getProfile:()=>apiClient.get<User>('/auth/profile')};
export const passageAPI={getAll:()=>apiClient.get<Passage[]>('/passages'),getById:(i:string)=>apiClient.get<Passage>(`/passages/${i}`),submitAnswer:(i:string,a:AnswerSubmission)=>apiClient.post<SubmissionResult>(`/passages/${i}/submit`,a),getProgress:()=>apiClient.get<Progress>('/passages/progress')};