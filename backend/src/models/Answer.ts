import pool from '../config/database';
export interface Answer{id:number;user_id:number;passage_id:number;question_type:number;question_id:number;user_answer:string[];created_at:Date;}
export const createAnswer=async(uid:number,pid:number,qt:number,qid:number,ua:string[]):Promise<Answer>=>{const q='INSERT INTO answers (user_id, passage_id, question_type, question_id, user_answer) VALUES ($1, $2, $3, $4, $5) RETURNING *';const r=await pool.query(q,[uid,pid,qt,qid,ua]);return r.rows[0];};
export const getAnswersByUserAndPassage=async(uid:number,pid:number,qt:number):Promise<Answer[]>=>{const q='SELECT DISTINCT ON (question_id) * FROM answers WHERE user_id = $1 AND passage_id = $2 AND question_type = $3 ORDER BY question_id, created_at DESC';const r=await pool.query(q,[uid,pid,qt]);return r.rows;};
export const initAnswersTable=async():Promise<void>=>{const q=`CREATE TABLE IF NOT EXISTS answers (id SERIAL PRIMARY KEY,user_id INTEGER NOT NULL REFERENCES users(id),passage_id INTEGER NOT NULL,question_type INTEGER NOT NULL,question_id INTEGER NOT NULL,user_answer TEXT[] NOT NULL,created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)`;await pool.query(q);}; 