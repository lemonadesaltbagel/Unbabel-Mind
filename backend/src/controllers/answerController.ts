import {Request,Response} from 'express';
import {createAnswer,getAnswersByUserAndPassage} from '../models/Answer';
import {createEssay,getEssayByUserAndPassage} from '../models/Essay';
import {getQuestionsByPassage} from '../models/Question';
import {createResult,getResultsByUser,getResultsByUserAndType} from '../models/Result';
export const submitAnswer=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId,answers,essay}=req.body;if(essay){await createEssay(userId,passageId,questionType,essay);await createResult(userId,passageId,questionType,null,null,null);res.json({success:true,message:'Essay submitted successfully'});}else if(answers&&Array.isArray(answers)){const p=answers.map(a=>createAnswer(userId,passageId,questionType,a.questionId,a.userAnswer));await Promise.all(p);const c=answers.filter(a=>{const q=a.question;return q&&q.correctAnswer&&JSON.stringify(Array.isArray(q.correctAnswer)?q.correctAnswer.sort():[q.correctAnswer].sort())===JSON.stringify(a.userAnswer.sort());}).length;const t=answers.length;const s=Math.round((c/t)*100);await createResult(userId,passageId,questionType,s,c,t);res.json({success:true,score:s,correctAnswers:c,totalQuestions:t,message:'Answers submitted successfully'});}else{res.status(400).json({success:false,message:'Invalid request data'});}}catch(e){console.error('Error submitting answer:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getAnswers=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId}=req.params;const a=await getAnswersByUserAndPassage(Number(userId),Number(passageId),Number(questionType));res.json({success:true,data:a});}catch(e){console.error('Error getting answers:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getEssay=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId}=req.params;const e=await getEssayByUserAndPassage(Number(userId),Number(passageId),Number(questionType));res.json({success:true,data:e});}catch(e){console.error('Error getting essay:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getUserResults=async(req:Request,res:Response):Promise<void>=>{try{const {userId}=req.params;const r=await getResultsByUser(Number(userId));res.json({success:true,data:r});}catch(e){console.error('Error getting user results:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getUserResultsByType=async(req:Request,res:Response):Promise<void>=>{try{const {userId,questionType}=req.params;const r=await getResultsByUserAndType(Number(userId),Number(questionType));res.json({success:true,data:r});}catch(e){console.error('Error getting user results by type:',e);res.status(500).json({success:false,message:'Internal server error'});}}; 