import {Request,Response} from 'express';
import {createAnswer,getAnswersByUserAndPassage} from '../models/Answer';
import {createEssay,getEssayByUserAndPassage} from '../models/Essay';
import {getQuestionsByPassage} from '../models/Question';
import {createResult,getResultsByUser,getResultsByUserAndType} from '../models/Result';
import {findUserById} from '../models/User';
import fs from 'fs';
import path from 'path';

const loadCorrectAnswers=(passageId:number,questionType:number):Record<number,string>=>{try{const filePath=path.join(__dirname,'../../public/static',questionType===1?'reading':'listening',`${passageId}_1_a.json`);const data=fs.readFileSync(filePath,'utf8');const answers=JSON.parse(data);const result:Record<number,string>={};answers.forEach((a:any)=>{result[a.number]=a.correctAnswer;});return result;}catch{return {};}};

export const submitAnswer=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId,answers,essay}=req.body;if(!userId){res.status(400).json({success:false,message:'User ID is required'});return;}const user=await findUserById(userId);if(!user){res.status(400).json({success:false,message:'User not found. Please log in again.'});return;}if(essay){await createEssay(userId,passageId,questionType,essay);await createResult(userId,passageId,questionType,null,null,null);res.json({success:true,message:'Essay submitted successfully'});}else if(answers&&Array.isArray(answers)){const p=answers.map(a=>createAnswer(userId,passageId,questionType,a.questionId,a.userAnswer));await Promise.all(p);const correctAnswers=loadCorrectAnswers(passageId,questionType);const c=answers.filter(a=>{const ca=correctAnswers[a.questionId];if(!ca)return false;const ua=a.userAnswer;if(ua.length===1&&ua[0]==='â€”')return false;return JSON.stringify(Array.isArray(ca)?ca.sort():[ca].sort())===JSON.stringify(ua.sort());}).length;const t=answers.length;const s=Math.round((c/t)*100);await createResult(userId,passageId,questionType,s,c,t);res.json({success:true,score:s,correctAnswers:c,totalQuestions:t,message:'Answers submitted successfully'});}else{res.status(400).json({success:false,message:'Invalid request data'});}}catch(e:any){console.error('Error submitting answer:',e);if(e.code==='23503'){res.status(400).json({success:false,message:'User not found. Please log in again.'});}else{res.status(500).json({success:false,message:'Internal server error'});}}};
export const getAnswers=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId}=req.params;const a=await getAnswersByUserAndPassage(Number(userId),Number(passageId),Number(questionType));res.json({success:true,data:a});}catch(e:any){console.error('Error getting answers:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getEssay=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId}=req.params;const e=await getEssayByUserAndPassage(Number(userId),Number(passageId),Number(questionType));res.json({success:true,data:e});}catch(e:any){console.error('Error getting essay:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getUserResults=async(req:Request,res:Response):Promise<void>=>{try{const {userId}=req.params;const r=await getResultsByUser(Number(userId));res.json({success:true,data:r});}catch(e:any){console.error('Error getting user results:',e);res.status(500).json({success:false,message:'Internal server error'});}};
export const getUserResultsByType=async(req:Request,res:Response):Promise<void>=>{try{const {userId,questionType}=req.params;const r=await getResultsByUserAndType(Number(userId),Number(questionType));res.json({success:true,data:r});}catch(e:any){console.error('Error getting user results by type:',e);res.status(500).json({success:false,message:'Internal server error'});}};

export const getResultsWithCorrectAnswers=async(req:Request,res:Response):Promise<void>=>{try{const {passageId,questionType,userId}=req.params;const a=await getAnswersByUserAndPassage(Number(userId),Number(passageId),Number(questionType));const correctAnswers=loadCorrectAnswers(Number(passageId),Number(questionType));const results=a.map((answer:any)=>{const ca=correctAnswers[answer.question_id];const ua=answer.user_answer;const isCorrect=JSON.stringify(Array.isArray(ca)?ca.sort():[ca].sort())===JSON.stringify(ua.sort());return{questionId:answer.question_id,userAnswer:ua,correctAnswer:ca,isCorrect};});res.json({success:true,data:results});}catch(e:any){console.error('Error getting results with correct answers:',e);res.status(500).json({success:false,message:'Internal server error'});}}; 